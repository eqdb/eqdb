baseUrl: http://localhost:8080/eqdb/v0/
sheets:

# Descriptors
- run:

  # Create descriptor.
  - route:             descriptor/create
    method:            POST
    request:
      isSubject:       column:isSubject
      translations:
      - locale:        en_US
        content:       column:Translation (en_US)
    response:
      descriptors:
      - id:            column:ID
        isSubject:     column:isSubject
      locales:
      - id:            1
        code:          en_US
      translations:
      - id:            pkey:next:translation
        descriptorId:  column:ID
        localeId:      1
        content:       column:Translation (en_US)

  # Add Dutch translation.
  - route:             descriptor/{id}/translations/create
    method:            POST
    url:
      id:              column:ID
    request:
      locale:          nl_NL
      content:         column:Translation (nl_NL)
    response:
      locales:
      - id:            2
        code:          nl_NL
      translations:
      - id:            pkey:next:translation
        descriptorId:  column:ID
        localeId:      2
        content:       column:Translation (nl_NL)

# Categories
- run:

  # Create category.
  - route:        category/create
    method:       POST
    request:
      if:hasParent:parentId:
                  column:Parent ID
    response:
      categories:
      - id:       column:ID
        parents:  column:[]Parents

# Functions
- extensions:
  - eqlib:
      idColumn: ID
      aliasColumn: Testing only
  run:

  # Create function.
  - route:                function/create
    method:               POST
    request:
      categoryId:         column:CID
      argumentCount:      column:Argc
      latexTemplate:      column:LaTeX template
      generic:            column:Generic
      if:Op:asOperator:
        precedenceLevel:  column:Precedence level
        associativity:    column:Associativity
    response:
      functions:
      - id:               column:ID
        categoryId:       column:CID
        argumentCount:    column:Argc
        latexTemplate:    column:LaTeX template
        generic:          column:Generic
      if:Op:operatorConfigurations:
      - id:               pkey:next:operator_configuration
        functionId:       column:ID
        precedenceLevel:  column:Precedence level
        associativity:    column:Associativity

  # Add name.
  - skip:                 true
    route:                function/{id}/name/update
    method:               POST
    url:
      id:                 column:ID
    request:
      descriptorId:       column:ndID
    response:
      functionNames:
      - id:               pkey:next:function_name
        functionId:       column:ID
        descriptorId:     column:ndID

  # Add tags.
  - skip:                 true
    route:                function/{id}/tags/create
    method:               POST
    url:
      id:                 column:ID
    request:
      descriptorId:       column:sdID
    response:
      functionTags:
      - id:               pkey:next:function_tag
        functionId:       column:ID
        descriptorId:     column:sdID

  # Add keyword.
  - skip:                 true
    route:                function/{id}/keywords/create
    method:               POST
    url:
      id:                 column:ID
    request:
      keyword:            column:Keyword
      keywordType:        column:K type
    response:
      0:keywords:
      - id:               pkey:next:keyword
        value:            column:Keyword
        type:             column:K type
      1:functionKeywords:
      - id:               pkey:next:function_keyword
        functionId:       column:ID
        keywordId:        pkey:current:keyword

# Definitions
- run:

  # Create definition.
  - route:                    definition/create
    method:                   POST
    request:
      categoryId:             column:cID
      left:                   eqlib:codec:column:Equation left
      right:                  eqlib:codec:column:Equation right
    response:
      rules:
      - id:                   column:rID
        categoryId:           column:cID
        0:leftExpressionId:   eqlib:index:column:Equation left
        1:rightExpressionId:  eqlib:index:column:Equation right
      definitions:
      - id:                   column:ID
        ruleId:               column:rID
      # expressions:            accect:anyList
      # functionReferences:     accect:anyList
      # integerReferences:      accect:anyList
    ignore:
    - expressions
    - functionReferences
    - integerReferences

  # Retrieve expression tree for left expression.
  - route:      expression/{id}/retrieveTree
    method:     GET
    url:
      id:       eqlib:index:column:Equation left
    response:
      id:       eqlib:index:column:Equation left
      rawData:  eqlib:codec:column:Equation left
    ignore:
    - reference

  # Retrieve expression tree for right expression.
  - route:      expression/{id}/retrieveTree
    method:     GET
    url:
      id:       eqlib:index:column:Equation right
    response:
      id:       eqlib:index:column:Equation right
      rawData:  eqlib:codec:column:Equation right
    ignore:
    - reference

# Lineages (1)
- run:

  # Create lineage.
  - skipIf:                 isEmpty:column:Initial
    route:                  lineage/create
    method:                 POST
    request:
      firstExpression:      eqlib:codec:column:Initial
    response:
      lineages:
      - id:                 column:L
        treeId:             column:T
        branchIndex:        0
        initialCategoryId:  column:C
        firstExpressionId:  eqlib:index:column:Initial
    ignore:
    - expressions
    - functionReferences
    - integerReferences

  # Resolve difference between two expressions to a single definition.
  - skip:                 true
    skipIf:               isEmpty:column:Previous
    route:                rule/resolve
    method:               POST
    request:
      from:               eqlib:codec:column:Previous
      to:                 eqlib:codec:column:Append
    response:
      differences:
      - type:             definition
        left:             eqlib:codec:column:Rule left
        right:            eqlib:codec:column:Rule right
        definitionId:     column:Definition ID
  
  # Append single expression to lineage by applying a rule.
  - skip:                 true
    skipIf:               isEmpty:column:Previous
    route:                lineage/{id}/append
    method:               POST
    url:
      id:                 column:L
    request:
      ruleId:             column:Definition ID
    response:
      lineageExpressions:
      - accept:any
      - id:               column:ID
        lineageId:        column:L
        lineageIndex:     column:Index
        ruleId:           column:Definition ID
        expressionId:     eqlib:index:column:Append
    ignore:
    - rules
    - expressions

# Proofs
- run:

  # Resolve difference between two expressions to a proof path.
  - skip:                 true
    route:                rule/resolve
    method:               POST
    request:
      from:               eqlib:codec:column:Proof left
      to:                 eqlib:codec:column:Proof right
    response:
      differences:
      - type:             proof
        left:             eqlib:codec:column:Proof left
        right:            eqlib:codec:column:Proof right
        proof:            []

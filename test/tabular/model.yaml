baseUrl: http://localhost:8080/eqdb/v0/
sheets:

# Descriptors
- run: []

  # # Create descriptor.
  # - route:                descriptor/create
  #   method:               POST
  #   request:
  #     isSubject:          column:isSubject
  #     translations:
  #     - locale:           en_US
  #       text:             column:Translation (en_US)
  #   response:
  #     id:                 pkey:next:descriptor
  #     translations:
  #     - id:               pkey:next:descriptor_translation
  #       locale:           en_US
  #       text:             column:Translation (en_US)

  # # Add Dutch translation.
  # - route:                descriptor/{id}/translations/create
  #   method:               POST
  #   url:
  #     id:                 current:ID
  #   request:
  #     locale:             nl_NL
  #     text:               column:Translation (nl_NL)
  #   response:
  #     id:                 pkey:next:descriptor_translation
  #     locale:             nl_NL
  #     text:               column:Translation (nl_NL)

# Categories
- run:

  # Create category.
  - route:                category/create
    method:               POST
    request:
      if:hasParent:parentId:  column:Parent ID
      #nameId:                 column:dID 
    response:
      id:                 column:ID
      path:               column:[]Parents
      #name:               column:dID

# Functions
- extensions:
  - eqlib:
      idColumn:           ID
      aliasColumn:        Testing only
  run:

  # Create function.
  - route:                function/create
    method:               POST
    request:
      categoryId:         column:CID
      argumentCount:      column:Argc
      latexTemplate:      column:LaTeX template
      generic:            column:Generic
      if:Op:asOperator:
        precedenceLevel:  column:Precedence level
        evaluationType:   column:Evaluation type
    response:
      id:                 column:ID
      categoryId:         column:CID
      argumentCount:      column:Argc
      latexTemplate:      column:LaTeX template
      generic:            column:Generic

  # # Add name.
  # - route:                function/{id}/name/update
  #   method:               POST
  #   url:
  #     id:                 column:ID
  #   request:
  #     descriptorId:       column:ndID
  #   response:
  #     id:                 pkey:next:function_name
  #     functionId:         column:ID
  #     descriptorId:       column:ndID

  # # Add tags.
  # - route:                function/{id}/tags/create
  #   method:               POST
  #   url:
  #     id:                 column:ID
  #   request:
  #     descriptorId:       column:sdID
  #   response:
  #     id:                 pkey:next:function_name
  #     functionId:         column:ID

  # # Add keyword.
  # - route:                function/{id}/keywords/create
  #   method:               POST
  #   url:
  #     id:                 column:ID
  #   request:
  #     keyword:            column:Keyword
  #     keywordType:        column:K type
  #   response:
  #     id:                 pkey:next:keyword
  #     value:              column:Keyword
  #     type:               column:K type

# Definitions
- run:

  # Create definition.
  - route:                definition/create
    method:               POST
    request:
      categoryId:         column:CID
      left:               eqlib:codec:column:Equation left
      right:              eqlib:codec:column:Equation right
    response:
      id:                 column:ID
      ruleId:             column:RID

  # Retrieve expression tree for left expression.
  - route:                expression/{id}/retrieveTree
    method:               GET
    url:
      id:                 eqlib:index:column:Equation left
    response:
      id:                 eqlib:index:column:Equation left
      rawData:            eqlib:codec:column:Equation left
    ignore:
    - reference

  # Retrieve expression tree for right expression.
  - route:                expression/{id}/retrieveTree
    method:               GET
    url:
      id:                 eqlib:index:column:Equation right
    response:
      id:                 eqlib:index:column:Equation right
      rawData:            eqlib:codec:column:Equation right
    ignore:
    - reference

# Lineages (1)
- run:

  # Create lineage.
  - skipIf:               isEmpty:column:Initial
    route:                lineage/create
    method:               POST
    request:
      firstExpression:    eqlib:codec:column:Initial
    response:
      id:                 column:L
      treeId:             column:T
      branchIndex:        0
      initialCategoryId:  column:C
      firstExpressionId:  eqlib:index:column:Initial

#   - skipIf:               isEmpty:column:Previous
#     route:                rule/resolve
#     method:               POST
#     request:
#       from:               eqlib:codec:column:Previous
#       to:                 eqlib:codec:column:Append
#     response:
#       differences:
#       - type:             definition
#         left:             eqlib:codec:column:Rule left
#         right:            eqlib:codec:column:Rule right
#         definitionId:     column:Definition ID
      
#   - skipIf:               isEmpty:column:Previous
#     route:                lineage/{id}/append
#     method:               POST
#     url:
#       id:                 column:L
#     request:
#       ruleId:             column:Definition ID
#     response:
#       id:                 column:ID
#       lineageId:          column:L
#       lineageIndex:       column:Index
#       ruleId:             column:Definition ID
#       expressionId:       eqlib:index:column:Append

# # Proofs
# - run:
#     route:                rule/resolve
#     method:               POST
#     request:
#       from:               eqlib:codec:column:Proof left
#       to:                 eqlib:codec:column:Proof right
#     response:
#       differences:
#       - type:             proof
#         left:             eqlib:codec:column:Proof left
#         right:            eqlib:codec:column:Proof right
#         proof:            []

// Copyright (c) 2017, Herman Bergwerf. All rights reserved.
// Use of this source code is governed by an AGPL-3.0-style license
// that can be found in the LICENSE file.

part of qedb.web.proof_editor;

/// Write JSON that contains step information that can be stored in the
/// localStorage in order to later reconstruct the proof.
dynamic writeStorageJson(StepBase step) {
  var data;
  if (step is StepEditor) {
    data = step.editor.getData();
  } else if (step is StepStatic) {
    data = {
      'latex': step.latex,
      'expr': step.expression.toBase64(),
      'initialStepId': step.initialStepId,
      'initialRuleId': step.initialRuleId
    };
  } else {
    throw new UnsupportedError('unknown step class');
  }

  return {
    'data': data,
    'next': step.next != null ? writeStorageJson(step.next) : null
  };
}

/// Load data generated by [writeStorageJson] and return resulting step.
StepBase loadStorageJson(Map json, EdiTeXInterface interface, QedbApi db,
    Element root, StepBase prev) {
  // Get data object.
  final data = json['data'];

  StepBase step;
  if (data is List) {
    final _step = new StepEditor(interface, db, root, prev);
    _step.editor.loadData(data);
    step = _step;
  } else if (data is Map) {
    step = new StepStatic(
        interface,
        db,
        root,
        prev,
        new Expr.fromBase64(data['expr']),
        data['latex'],
        data['initialStepId'],
        data['initialRuleId']);
  } else {
    throw new Exception('could not process data');
  }

  if (json['next'] != null) {
    step.next = loadStorageJson(json['next'], interface, db, root, step);
  }

  step.afterUpdate.add(null);
  return step;
}

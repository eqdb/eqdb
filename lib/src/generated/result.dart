// Copyright (c) 2017, Herman Bergwerf. All rights reserved.
// Use of this source code is governed by an AGPL-3.0-style license
// that can be found in the LICENSE file.

part of eqpg.dbutils;

// PLEASE DO NOT EDIT THIS FILE, THIS CODE IS AUTO-GENERATED.

class QueryResult {
  List<db.DescriptorTable> descriptors = [];
  List<db.SubjectTable> subjects = [];
  List<db.LocaleTable> locales = [];
  List<db.TranslationTable> translations = [];
  List<db.CategoryTable> categories = [];
  List<db.FunctionTable> functions = [];
  List<db.FunctionSubjectTagTable> functionSubjectTags = [];
  List<db.OperatorConfigurationTable> operatorConfigurations = [];
  List<db.ExpressionTable> expressions = [];
  List<db.FunctionReferenceTable> functionReferences = [];
  List<db.IntegerReferenceTable> integerReferences = [];
  List<db.LineageTable> lineages = [];
  List<db.RuleTable> rules = [];
  List<db.DefinitionTable> definitions = [];

  /// Replace all empty lists with null so that they are removed from the
  /// response JSON.
  void finalize() {
    if (descriptors.isEmpty) {
      descriptors = null;
    }
    if (subjects.isEmpty) {
      subjects = null;
    }
    if (locales.isEmpty) {
      locales = null;
    }
    if (translations.isEmpty) {
      translations = null;
    }
    if (categories.isEmpty) {
      categories = null;
    }
    if (functions.isEmpty) {
      functions = null;
    }
    if (functionSubjectTags.isEmpty) {
      functionSubjectTags = null;
    }
    if (operatorConfigurations.isEmpty) {
      operatorConfigurations = null;
    }
    if (expressions.isEmpty) {
      expressions = null;
    }
    if (functionReferences.isEmpty) {
      functionReferences = null;
    }
    if (integerReferences.isEmpty) {
      integerReferences = null;
    }
    if (lineages.isEmpty) {
      lineages = null;
    }
    if (rules.isEmpty) {
      rules = null;
    }
    if (definitions.isEmpty) {
      definitions = null;
    }
  }
}
